var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@angular/core';
import { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';
/**
 * @name Network Interface
 * @description
 * Network interface information plugin for Cordova/PhoneGap that supports Android, Blackberry 10, Browser, iOS, and Windows Phone 8.
 *
 * @usage
 * ```typescript
 * import { NetworkInterface } from '@ionic-native/network-interface';
 *
 * constructor( private networkInterface: NetworkInterface ) {
 *
 *   this.networkInterface.getWiFiIPAddress()
 *     .then(address => console.info(`IP: ${address.ip}, Subnet: ${address.subnet}`))
 *     .catch(error => console.error(`Unable to get IP: ${error}`));
 *
 *   this.networkInterface.getCarrierIPAddress()
 *     .then(address => console.info(`IP: ${address.ip}, Subnet: ${address.subnet}`))
 *     .catch(error => console.error(`Unable to get IP: ${error}`));
 *
 *   const url = 'www.github.com';
 *   this.networkInterface.getHttpProxyInformation(url)
 *     .then(proxy => console.info(`Type: ${proxy.type}, Host: ${proxy.host}, Port: ${proxy.port}`))
 *     .catch(error => console.error(`Unable to get proxy info: ${error}`));
 * }
 * ```
 */
var NetworkInterface = (function (_super) {
    __extends(NetworkInterface, _super);
    function NetworkInterface() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Gets the WiFi IP address
     * @return {Promise<any>} Returns a Promise that resolves with the IP address information.
     */
    /**
       * Gets the WiFi IP address
       * @return {Promise<any>} Returns a Promise that resolves with the IP address information.
       */
    NetworkInterface.prototype.getWiFiIPAddress = /**
       * Gets the WiFi IP address
       * @return {Promise<any>} Returns a Promise that resolves with the IP address information.
       */
    function () {
        return;
    };
    /**
     * Gets the wireless carrier IP address
     * @return {Promise<any>} Returns a Promise that resolves with the IP address information.
     */
    /**
       * Gets the wireless carrier IP address
       * @return {Promise<any>} Returns a Promise that resolves with the IP address information.
       */
    NetworkInterface.prototype.getCarrierIPAddress = /**
       * Gets the wireless carrier IP address
       * @return {Promise<any>} Returns a Promise that resolves with the IP address information.
       */
    function () {
        return;
    };
    /**
     * Gets the relevant proxies for the passed URL in order of application
     * @param {url} message  The message to display.
     * @return {Promise<any>} Returns a Promise that resolves with the proxy information.
     */
    /**
       * Gets the relevant proxies for the passed URL in order of application
       * @param {url} message  The message to display.
       * @return {Promise<any>} Returns a Promise that resolves with the proxy information.
       */
    NetworkInterface.prototype.getHttpProxyInformation = /**
       * Gets the relevant proxies for the passed URL in order of application
       * @param {url} message  The message to display.
       * @return {Promise<any>} Returns a Promise that resolves with the proxy information.
       */
    function (url) {
        return;
    };
    NetworkInterface.decorators = [
        { type: Injectable },
    ];
    __decorate([
        Cordova(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], NetworkInterface.prototype, "getWiFiIPAddress", null);
    __decorate([
        Cordova(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], NetworkInterface.prototype, "getCarrierIPAddress", null);
    __decorate([
        Cordova(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String]),
        __metadata("design:returntype", Promise)
    ], NetworkInterface.prototype, "getHttpProxyInformation", null);
    /**
     * @name Network Interface
     * @description
     * Network interface information plugin for Cordova/PhoneGap that supports Android, Blackberry 10, Browser, iOS, and Windows Phone 8.
     *
     * @usage
     * ```typescript
     * import { NetworkInterface } from '@ionic-native/network-interface';
     *
     * constructor( private networkInterface: NetworkInterface ) {
     *
     *   this.networkInterface.getWiFiIPAddress()
     *     .then(address => console.info(`IP: ${address.ip}, Subnet: ${address.subnet}`))
     *     .catch(error => console.error(`Unable to get IP: ${error}`));
     *
     *   this.networkInterface.getCarrierIPAddress()
     *     .then(address => console.info(`IP: ${address.ip}, Subnet: ${address.subnet}`))
     *     .catch(error => console.error(`Unable to get IP: ${error}`));
     *
     *   const url = 'www.github.com';
     *   this.networkInterface.getHttpProxyInformation(url)
     *     .then(proxy => console.info(`Type: ${proxy.type}, Host: ${proxy.host}, Port: ${proxy.port}`))
     *     .catch(error => console.error(`Unable to get proxy info: ${error}`));
     * }
     * ```
     */
    NetworkInterface = __decorate([
        Plugin({
            pluginName: 'NetworkInterface',
            plugin: 'cordova-plugin-networkinterface',
            pluginRef: 'networkinterface',
            repo: 'https://github.com/salbahra/cordova-plugin-networkinterface',
            platforms: ['Android', 'BlackBerry 10', 'Browser', 'iOS', 'Windows', 'Windows Phone'],
        })
    ], NetworkInterface);
    return NetworkInterface;
}(IonicNativePlugin));
export { NetworkInterface };
//# sourceMappingURL=index.js.map